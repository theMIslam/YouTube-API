package com.example.youtube_api.ui.detailimport android.annotation.SuppressLintimport android.os.Buildimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.annotation.RequiresApiimport androidx.recyclerview.widget.RecyclerViewimport com.example.youtube_api.core.utils.loadImageimport com.example.youtube_api.data.remote.model.PlaylistItemimport com.example.youtube_api.databinding.ItemDetailBindingclass DetailAdapter(private val onClick: (PlaylistItem.Item) -> Unit) :    RecyclerView.Adapter<DetailAdapter.DetailViewHolder>() {    private var playlistItems = listOf<PlaylistItem.Item>()    @SuppressLint("NotifyDataSetChanged")    fun addList(list: List<PlaylistItem.Item?>?) {        this.playlistItems = list as List<PlaylistItem.Item>        notifyDataSetChanged()    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DetailViewHolder {        return DetailViewHolder(            ItemDetailBinding.inflate(LayoutInflater.from(parent.context), parent, false)        )    }    override fun getItemCount(): Int {        return playlistItems.size    }    @RequiresApi(Build.VERSION_CODES.O)    override fun onBindViewHolder(holder: DetailViewHolder, position: Int) {        val playlistItem = playlistItems[position]        val videoId = playlistItem.contentDetails?.videoId//        if (videoId != null) {////            VideoId.setVideo(videoId) { video ->////                holder.onBind(playlistItem, video)////            }////        } else {////            holder.onBind(playlistItem, null)////        }        holder.onBind(playlistItem)    }    inner class DetailViewHolder(private val binding: ItemDetailBinding) :        RecyclerView.ViewHolder(binding.root) {        @RequiresApi(Build.VERSION_CODES.O)        fun onBind(item: PlaylistItem.Item) {//            fun onBind(item: PlaylistItem.Item, videoItem: Items?) {            binding.image.loadImage(item.snippet?.thumbnails?.standard?.url!!)            binding.titleTv.text = item.snippet.title            binding.cvImage.setOnClickListener {                onClick.invoke(item)            }//            if (videoItem != null) {//                val duration = convertDuration(videoItem.contentDetails.duration)//                binding.durationTv.text = duration//                Log.e(//                    "com.example.youtube.ui.detail.DetailAdapter",//                    "onBind: ${(videoItem.contentDetails)}"//                )        }    }}//object VideoId {//    private val viewModel: MainViewModel by viewModel()//    fun setVideo(id: String, onResult: (Items?) -> Unit) {//        viewModel.getVideo(id).observeForever { resource ->//            when (resource.status) {//                Resource.Status.SUCCESS -> {//                    val video = resource.data?.items?.getOrNull(0)//                    onResult(video)//                }//                else -> {//                    onResult(null)//                }//            }//        }//    }//}object ConvertDuration {    fun convertDuration(duration: String): String {        val regex = "^PT(\\d+)M(\\d+)S$".toRegex()        val matchResult = regex.find(duration)        if (matchResult != null && matchResult.groupValues.size == 3) {            val minutes = matchResult.groupValues[1].toInt()            val seconds = matchResult.groupValues[2].toInt()            return "$minutes:${String.format("%02d", seconds)}"        }        return ""    }}